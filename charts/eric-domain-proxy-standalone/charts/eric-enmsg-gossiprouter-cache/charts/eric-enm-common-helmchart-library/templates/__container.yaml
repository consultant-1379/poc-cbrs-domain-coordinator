{{- define "eric-enm-common-helmchart-library.container.tpl" -}}
initContainers:
{{- if index .Values "images" "waitInitContainer" }}
{{- if .Values.images.waitInitContainer.enabled }}
- name: {{ .Values.service.name }}-wait
  image: {{ template "eric-enm-common-helmchart-library.registryUrl" . }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" "waitInitContainer" "name" }}:{{ index .Values "images" "waitInitContainer" "tag" }}
  imagePullPolicy: {{ .Values.imageCredentials.pullPolicy }}
  command: {{ index .Values "images" "waitInitContainer" "command" }}
{{- if .Files.Glob "appconfig/initcontainers/waitInitContainer/env.yaml" }}
  env:
{{ tpl (.Files.Get "appconfig/initcontainers/waitInitContainer/env.yaml") . | indent 4 }}
{{- end }}
{{- end }}
{{- if index .Values "images" "enmInitContainer" }}
{{- if .Values.images.enmInitContainer.enabled }}
- name: {{ .Values.service.name }}-init
  image: {{ template "eric-enm-common-helmchart-library.registryUrl" . }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" "enmInitContainer" "name" }}:{{ index .Values "images" "enmInitContainer" "tag" }}
{{- if index .Values "images" "enmInitContainer" "privileged" }}
{{- if .Values.images.enmInitContainer.privileged.enabled }}
  securityContext:
    privileged: true
{{- end }}
{{- end }}
  imagePullPolicy: {{ .Values.imageCredentials.pullPolicy }}
  command: {{ index .Values "images" "enmInitContainer" "command" }}
  env:
{{- if .Files.Glob "appconfig/initcontainers/enmInitContainer/env.yaml" }}
{{ tpl (.Files.Get "appconfig/initcontainers/enmInitContainer/env.yaml") . | indent 4 }}
{{- end }}
  volumeMounts:
{{ tpl (.Files.Get "appconfig/volumeMounts.yaml") . | indent 2 }}
{{ tpl (.Files.Get "appconfig/initcontainers/enmInitContainer/volumeMounts.yaml") . | indent 2 }}
{{- end }}
{{- end }}
{{- if index .Values "images" "waitForCertificatesContainer" }}
{{- if .Values.images.waitForCertificatesContainer.enabled }}
- name: {{ .Values.service.name }}-waitforcerts
  image: {{ template "eric-enm-common-helmchart-library.registryUrl" . }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" "waitForCertificatesContainer" "name" }}:{{ index .Values "images" "waitForCertificatesContainer" "tag" }}
  imagePullPolicy: {{ .Values.imageCredentials.pullPolicy }}
  command: {{ index .Values "images" "waitForCertificatesContainer" "command" }}
  env:
{{- if .Files.Glob "appconfig/initcontainers/waitForCertificatesContainer/env.yaml" }}
{{ tpl (.Files.Get "appconfig/initcontainers/waitForCertificatesContainer/env.yaml") . | indent 4 }}
{{- end }}
  volumeMounts:
{{ tpl (.Files.Get "appconfig/initcontainers/waitForCertificatesContainer/volumeMounts.yaml") . | indent 2 }}
{{- end }}
{{- end }}
{{- end }}
containers:
- name: {{ .Values.service.name }}
  image: {{ template "eric-enm-common-helmchart-library.registryUrl" . }}/{{ .Values.imageCredentials.repoPath }}/{{ index .Values "images" .Chart.Name "name" }}:{{ index .Values "images" .Chart.Name "tag" }}
{{- if index .Values "privileged" }}
  securityContext:
    privileged: {{ .Values.privileged.enabled }}
{{- if index .Values "privileged" "capabilities" }}
    capabilities:
{{ toYaml .Values.privileged.capabilities  | indent 6 }}
{{- end }}
{{- end }}
  imagePullPolicy: {{ .Values.imageCredentials.pullPolicy }}
{{- if index .Values "lifecycle" }}
{{- if  .Values.lifecycle.handler.enabled }}
  lifecycle:
{{ .Files.Get "appconfig/lifecycle_handler.yaml" | indent 4 }}
{{- end }}
{{- end }}
{{- if index .Values "images" .Chart.Name "command" }}
  command: {{ index .Values "images" .Chart.Name "command" }}
{{- end }}
{{- if or .Values.resources.requests.enabled .Values.resources.limits.enabled }}
  resources:
{{- if  .Values.resources.requests.enabled }}
    requests:
{{- if  .Values.resources.requests.memory }}
      memory: {{ .Values.resources.requests.memory | quote }}
{{- end }}
{{- if  .Values.resources.requests.cpu }}
      cpu: {{ .Values.resources.requests.cpu | quote }}
{{- end }}
{{- end }}
{{- if  .Values.resources.limits.enabled }}
    limits:
{{- if  .Values.resources.limits.memory }}
      memory: {{ .Values.resources.limits.memory | quote }}
{{- end }}
{{- if  .Values.resources.limits.cpu }}
      cpu: {{ .Values.resources.limits.cpu | quote }}
{{- end }}
{{- end }}
{{- end }}
  env:
    - name: TZ
      value: {{ .Values.global.timezone }}
{{- if not .Values.jbossLogging }}
    - name: JBOSS_LOG_LEVEL
      value:
{{- if .Values.global.enmProperties }} {{ .Values.global.enmProperties.defaultJbossLogLevel  | default "\"\"" }} {{ end }}
{{- else if not .Values.jbossLogging.exclude }}
    - name: JBOSS_LOG_LEVEL
      value:
{{- if .Values.jbossLogging.level }} {{ .Values.jbossLogging.level }} {{ else if .Values.global.enmProperties }} {{ .Values.global.enmProperties.defaultJbossLogLevel |  default "\"\"" }} {{ end }}
{{- end }}
{{- if .Files.Glob "appconfig/envvars/*.yaml" }}
{{ $root := .}}
{{ range $path, $bytes :=  .Files.Glob  "appconfig/envvars/*.yaml" }}
{{ tpl ($root.Files.Get $path) $root | indent 4 }}
{{ end }}
{{- end }}
{{- if .Files.Glob "appconfig/containerPorts.yaml" }}
  ports:
{{ tpl (.Files.Get "appconfig/containerPorts.yaml") . | indent 4 }}
{{- end }}
{{- if index .Values "startupProbe" }}
{{- if .Values.startupProbe.enabled }}
  startupProbe:
{{- if .Values.startupProbe.httpPort }}
    httpGet:
      port: {{ .Values.startupProbe.httpPort }}
{{- if .Values.startupProbe.httpPath }}
      path: {{ .Values.startupProbe.httpPath }}
{{- end }}
{{- end }}
{{- if .Values.startupProbe.command }}
    exec:
      command:
        - {{ .Values.startupProbe.command}}
        - {{ .Values.startupProbe.arguments }}
{{- end }}
    initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.startupProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
    failureThreshold: {{ .Values.startupProbe.failureThreshold }}
{{- end }}
{{- end }}
{{- if .Values.livenessProbe.enabled }}
  livenessProbe:
{{- if .Values.livenessProbe.httpPort }}
    httpGet:
      port: {{ .Values.livenessProbe.httpPort }}
{{- if .Values.livenessProbe.httpPath }}
      path: {{ .Values.livenessProbe.httpPath }}
{{- end }}
{{- end }}
{{- if .Values.livenessProbe.command }}
    exec:
      command:
        - {{ .Values.livenessProbe.command}}
        - {{ .Values.livenessProbe.arguments }}
{{- end }}
    initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
    failureThreshold: 2
{{- end }}
{{- if .Values.readinessProbe.enabled }}
  readinessProbe:
{{- if .Values.livenessProbe.httpPort }}
    httpGet:
      port: {{ .Values.readinessProbe.httpPort }}
{{- if .Values.readinessProbe.httpPath }}
      path: {{ .Values.readinessProbe.httpPath }}
{{- end }}
{{- end }}
{{- if .Values.livenessProbe.command }}
    exec:
      command:
        - {{ .Values.readinessProbe.command}}
        - {{ .Values.readinessProbe.arguments }}
{{- end }}
    initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
    periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
    timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
    failureThreshold: 2
{{- end }}
{{- if .Files.Glob  "appconfig/volumeMounts.yaml" }}
  volumeMounts:
{{- if index .Values "persistentVolumeClaim" }}
{{- if .Values.persistentVolumeClaim.enabled }}
  - name: pv-{{ template "eric-enm-common-helmchart-library.name" . }}
    mountPath: {{ .Values.persistentVolumeClaim.mountPath }}
{{- end }}
{{- end }}
{{ tpl (.Files.Get "appconfig/volumeMounts.yaml") . | indent 2 }}
{{- end }}
{{- if index .Values "images" "eric-enm-monitoring" }}
{{- if index .Values "images" "eric-enm-monitoring" "enabled" }}
{{ include "eric-enm-common-helmchart-library.monitoring.tpl" . }}
{{- end }}
{{- end }}
{{- if .Files.Glob "appconfig/sidecars/*.yaml" }}
{{ $root := .}}
{{ range $path, $bytes :=  .Files.Glob  "appconfig/sidecars/*.yaml" }}
-
{{ tpl ($root.Files.Get $path) $root | indent 2 }}
{{ end }}
{{- end }}
{{- end -}}
