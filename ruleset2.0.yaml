modelVersion: 2.0

description: "CBRS Standalone Domain Proxy Service"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:latest
  - image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:latest
  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:latest
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:latest

import:
  common: common-properties.yaml

# List of constants
properties:
  - image-registry-path: armdocker.rnd.ericsson.se/proj-poc-cbrs
  - image-secret: armdocker
  - image-dev-repopath: ${image-registry-path}-dev
  - image-ci-repopath: ${image-registry-path}-ci-internal
  - image-drop-repopath: ${image-registry-path}-drop
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}
  - init-image-full-name: ${image-drop-repopath}/${common.init-docker-image-name}

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-poc-cbrs
  - helm-chart-dev-repopath: ${helm-chart-repo-server-path}-dev-helm
  - helm-chart-ci-repopath: ${helm-chart-repo-server-path}-ci-internal-helm
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm

  # Functional ID for your Team or CI group to push to Gerrit repo
  - git-user: lciadm100
  - git-repo-path: OSS/ENM-Parent/SQ-Gate/com.ericsson.oss.containerisation/poc-cbrs-domain-coordinator
  - git-repo-url: ssh://${git-user}@gerrit.ericsson.se:29418/${git-repo-path}

  ##########################################
  # Remove "|| true" when chart is updated #
  ##########################################
  - enabled-helm-design-rules: " || true"
  ##########################################
  # Remove "|| true" when image is updated #
  ##########################################
  - enabled-image-design-rules: " || true"
  ###############################################
  # Remove "|| true" when init image is updated #
  ###############################################
  - enabled-init-image-design-rules: " || true"

# Import environment variables (For example: Jenkins parameters)
env:
  - HOME
  - PWD
  - RELEASE (default=false)
  - DOCKER_NETWORK (default=--network host)
  - IMAGE_TAG

  # Kubernetes
  - COLLECT_LOGS_DIR (default=./k8s-logs)
  - ENABLE_HELM_V3 (default=true)
  - HELM_INSTALL_TIMEOUT (default=5m0s)
  - HELM_RELEASE (default=${common.helm-chart-name}-release)
  - HELM_TEST_TIMEOUT (default=5m0s)
  - HELM_VERSION (default="3.5.2")
  - K8_NAMESPACE (default=${common.helm-chart-name}-${var.commithash})
  - KUBECONFIG (default=${env.PWD}/k8s-test/kubeconfig)

  # Credentials
  - DOCKER_CONFIG (default=${env.HOME}/.docker/config.json)
  - GERRIT_USERNAME
  - GERRIT_PASSWORD
  - HELM_REPO_TOKEN

# Variables, set by below tasks
var:
  - commithash
  - commithash-full
  - commit-author
  - commit-email
  - docker-config-basepath
  - image-registry
  - helm-chart-repo-internal
  - image-full-name-internal
  - init-image-full-name-internal
  - image-repopath-internal
  - image-repopath-drop
  - rstate
  - version

default-rules:
  - clean
  - init-dev
  - lint
  - image
  - image-dr-check
  - package
  - k8s-test

# Rules to execute
rules:

  # Integrated rule to execute everything locally (init-dev)
  release:
    - rule: clean
    - rule: init-dev
    - rule: lint
    - rule: image
    - rule: image-dr-check
    - rule: package
    - rule: k8s-test

  # Clean workspace
  clean:
    - task: rm
      cmd:
        - rm -rf .bob/ \?/ test-output/
        - rm -rf k8s-logs/
        - rm -f artifact.properties

  # Common tasks for all init rules
  init-common:
    - task: version
      docker-image: adp-release-auto
      docker-flags:
        - "--env RELEASE"
      cmd: generate-version --is-release ${env.RELEASE} --output version
    - task: rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: commit
      docker-image: adp-release-auto
      cmd:
        - git rev-parse --short HEAD > .bob/var.commithash
        - git rev-parse HEAD > .bob/var.commithash-full
        - git log -1 --format='%aN' > .bob/var.commit-author
        - git log -1 --format='%aE' > .bob/var.commit-email

  # Dev Tasks: only used by manually publishing development/black builds by developers
  init-dev:
    - rule: init-common
    - task: image-repopath-internal
      cmd: echo "${image-dev-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-dev-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-dev-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: init-image-full-name-internal
      cmd: echo "${image-dev-repopath}/${common.init-docker-image-name}" > .bob/var.init-image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-dev-repopath}" > .bob/var.helm-chart-repo-internal

  # CI-Internal Tasks: used by CI to use as temporary storage for testing, only CI user has write access.
  init-precodereview:
    - rule: init-common
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: init-image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.init-docker-image-name}" > .bob/var.init-image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal

  # Drop level tasks: used by CI to publish artifacts after successful CI pipeline execution for a drop build
  init-drop:
    - rule: init-common
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-repopath-drop
      cmd: echo "${image-drop-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-drop
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: init-image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.init-docker-image-name}" > .bob/var.init-image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: adp-artifacts-properties
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts
        --chart-name ${common.helm-chart-name}
        --chart-version ${var.version}
        --chart-repo ${helm-chart-drop-repo}
        --image-name ${common.docker-image-name}
        --image-version ${var.version}
        --image-repo "${var.image-registry}/${var.image-repopath-drop}"
    - task: write-git-details
      cmd:
        - echo "GIT_TAG=$(git log -1 --pretty=format:'%h')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> artifact.properties
        - echo "GIT_COMMIT_SUMMARY=$(git log -1 --pretty=format:'%s')" >> artifact.properties

  lint:
    - task: helm
      docker-image: adp-helm-dr-check
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
        - ${env.DOCKER_NETWORK}
      cmd: helm3 lint charts/${common.helm-chart-name}
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: helm-dr-check --helm-v3 --output .bob/ --helm-chart charts/${common.helm-chart-name} ${enabled-helm-design-rules}

  # Build a docker image pointing to dirty repository
  image:
    - task: docker-build
      cmd: docker build ${env.PWD} ${env.DOCKER_NETWORK}
        --file docker/${common.docker-image-name}/Dockerfile
        --tag ${var.image-full-name-internal}:${var.version}
        --build-arg BASE_OS_VERSION=${common.image-base-os-version}
    - task: docker-build-init
      cmd: docker build ${env.PWD} ${env.DOCKER_NETWORK}
        --file docker/${common.init-docker-image-name}/Dockerfile
        --tag ${var.init-image-full-name-internal}:${var.version}
        --build-arg BASE_OS_VERSION=${common.image-base-os-version}

  # Check for image design rule compliance
  image-dr-check:
    - task: check-image-dr
      docker-image: image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-full-name-internal}:${var.version}
          --output .bob/check-image/
          ${enabled-image-design-rules}"
    - task: check-init-image-dr
      docker-image: image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.init-image-full-name-internal}:${var.version}
          --output .bob/check-init-image/
          ${enabled-init-image-design-rules}"

  # Push image to ci-internal repo and create local version of helm chart
  package-local:
    - task: image-push-internal
      cmd:
      - docker push ${var.image-full-name-internal}:${var.version}
      - docker push ${var.init-image-full-name-internal}:${var.version}
    - task: package-helm-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output .bob/${common.helm-chart-name}-internal
        --version ${var.version}

  # Push image to ci-internal repo, create internal version of helm chart and push it to internal repo
  package:
    - rule: package-local
    - task: helm-upload-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env HELM_REPO_TOKEN=${env.HELM_REPO_TOKEN}"
      cmd: upload_file.sh
        --filename=.bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --repository=${var.helm-chart-repo-internal}/${common.helm-chart-name}
        --api-token=${env.HELM_REPO_TOKEN}

  k8s-test:
    - rule: helm-dry-run
    - rule: create-namespace
    - rule: setup-secrets
    - rule: helm-install
    - rule: healthcheck
    - rule: helm-test
    - rule: collect-k8s-logs
    - rule: delete-namespace

  helm-dry-run:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: helm-dry-run
      docker-image: adp-helm-kubectl
      docker-flags: &docker_flags_kube_config
        - ${env.DOCKER_NETWORK}
        - "--env HOME=${env.HOME}"
        - "--env K8_NAMESPACE=${env.K8_NAMESPACE}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env ENABLE_HELM_V3"
        - "--env HELM_VERSION"
        - "--volume ${env.PWD}:${env.PWD}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
        - "--volume ${var.docker-config-basepath}:${var.docker-config-basepath}"
      cmd:
        - mkdir -p ${env.COLLECT_LOGS_DIR}
        - helm install .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
          --dry-run
          --debug
          --generate-name > ${env.COLLECT_LOGS_DIR}/helm-install-dry-run.log

  create-namespace:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8_NAMESPACE}

  setup-secrets:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace-if-not-exists
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${env.K8_NAMESPACE} || true
    - task: setup-secrets
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic ${image-secret}
        --from-file=.dockerconfigjson=${env.DOCKER_CONFIG}
        --type=kubernetes.io/dockerconfigjson
        --namespace ${env.K8_NAMESPACE} || true

  helm-install:
    - rule: setup-secrets
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: install-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm install ${env.HELM_RELEASE} .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --namespace ${env.K8_NAMESPACE}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${env.K8_NAMESPACE}
        --set imageCredentials.pullSecret=${image-secret}
        --set global.registry.url=${var.image-registry}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait

  healthcheck:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: healthcheck
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: ./k8s-test/healthcheck.sh

  helm-test:
    - rule: setup-secrets
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: install-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm test ${env.HELM_RELEASE}
        --namespace ${env.K8_NAMESPACE}
        --timeout ${env.HELM_TEST_TIMEOUT}

  delete-namespace:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: delete-release
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm delete ${env.HELM_RELEASE} --namespace ${env.K8_NAMESPACE}
    - task: delete-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${env.K8_NAMESPACE}

  # Publish docker images and helm charts to drop repository
  # Call publish only when merged to master
  publish:
    - task: package-helm-public
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd: helm-package
        --folder charts/${common.helm-chart-name}
        --workdir .bob --output build
        --version ${var.version}
    - task: image-pull-internal
      cmd:
      - docker pull ${var.image-full-name-internal}:${var.version}
      - docker pull ${var.init-image-full-name-internal}:${var.version}
    - task: image-tag-public
      cmd:
      - docker tag ${var.image-full-name-internal}:${var.version} ${image-full-name}:${var.version}
      - docker tag ${var.init-image-full-name-internal}:${var.version} ${init-image-full-name}:${var.version}
    - task: image-push-public
      cmd:
      - docker push ${image-full-name}:${var.version}
      - docker push ${init-image-full-name}:${var.version}
    - task: git-tag
      cmd:
        - git tag -af ${var.version} -m "Release ${var.version}"
        - git remote set-url origin ${git-repo-url}
        - git push origin ${var.version} || true
    - task: helm-upload
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env HELM_REPO_TOKEN=${env.HELM_REPO_TOKEN}"
      cmd: upload_file.sh
        --filename=build/${common.helm-chart-name}-${var.version}.tgz
        --repository=${helm-chart-drop-repo}/${common.helm-chart-name}
        --api-token=${env.HELM_REPO_TOKEN}

  collect-k8s-logs:
    - task: collect-logs-using-script
      docker-image: adp-helm-kubectl
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3"
        - "--env HELM_VERSION"
        - "--env COLLECT_LOGS_DIR"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd:
        - mkdir -p ${env.COLLECT_LOGS_DIR}
        - kubectl config view > ${env.COLLECT_LOGS_DIR}/kubectl.config
        - kubectl get ns > ${env.COLLECT_LOGS_DIR}/kubectl-get-ns.log
        - helm ls -Aa > ${env.COLLECT_LOGS_DIR}/helm-ls-Aa.log
        - printenv | grep -v CREDENTIALS | grep -v ARTIFACTORY > ${env.COLLECT_LOGS_DIR}/printenv.log

  # Create new cbo patch
  create-new-cbo-patch:
    - task: create-new-cbo-patch
      docker-image: adp-release-auto
      docker-flags:
        - "--env GERRIT_USERNAME"
        - "--env GERRIT_PASSWORD"
      cmd:
        - "sed -i 's/image-base-os-version: .*/image-base-os-version: \"${env.IMAGE_TAG}\"/' common-properties.yaml"
        - gerrit create-patch
          --file common-properties.yaml
          --message "NO-JIRA Update Common Base OS to ${env.IMAGE_TAG}"
          --git-repo-local .
          --wait-label "Verified"="+1"
          --debug